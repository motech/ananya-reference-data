<databaseChangeLog

        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
         http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

    <changeSet context="setup" author="ThoughtWorks" id="1">
        <sql splitStatements="false">
            CREATE TABLE ananya_reference_data.location(
            id serial primary key,
            district varchar(255),
            block varchar(255),
            panchayat varchar(255),
            district_code int,
            block_code int,
            panchayat_code int
            );
        </sql>
    </changeSet>

    <changeSet context="setup" author="ThoughtWorks" id="2">
        <sql splitStatements="false">
            CREATE TABLE ananya_reference_data.front_line_worker(
            id serial,
            msisdn bigint,
            name varchar(255),
            designation varchar(30),
            location_id integer REFERENCES ananya_reference_data.location(id)
            );
        </sql>
    </changeSet>

    <changeSet context="setup" author="ThoughtWorks" id="3">
        <sql splitStatements="false">
            ALTER TABLE ananya_reference_data.front_line_worker ADD last_modified timestamp;
        </sql>
    </changeSet>

    <changeSet context="setup" author="ThoughtWorks" id="4">
        <sql splitStatements="false">
            ALTER TABLE ananya_reference_data.location ADD last_modified timestamp;
        </sql>
    </changeSet>

    <changeSet context="setup" author="ThoughtWorks" id="5">
        <sql splitStatements="false">
            CREATE TABLE ananya_reference_data.property(
            id serial primary key,
            name varchar(40),
            value varchar(40)
            );
        </sql>
    </changeSet>

    <changeSet context="setup" author="ThoughtWorks" id="6">
        <sql splitStatements="false">
            INSERT INTO ananya_reference_data.property(name,value) values('syncSwitch','on');
        </sql>
    </changeSet>

    <changeSet context="setup" author="ThoughtWorks" id="7">
        <sql splitStatements="false">
            ALTER TABLE ananya_reference_data.front_line_worker ADD should_sync boolean;
        </sql>
    </changeSet>

    <changeSet context="setup" author="ThoughtWorks" id="8">
        <sql splitStatements="false">
            DROP TABLE IF EXISTS qrtz_locks;
            DROP TABLE IF EXISTS qrtz_scheduler_state;
            DROP TABLE IF EXISTS qrtz_fired_triggers;
            DROP TABLE IF EXISTS qrtz_paused_trigger_grps;
            DROP TABLE IF EXISTS qrtz_calendars;
            DROP TABLE IF EXISTS qrtz_trigger_listeners;
            DROP TABLE IF EXISTS qrtz_blob_triggers;
            DROP TABLE IF EXISTS qrtz_cron_triggers;
            DROP TABLE IF EXISTS qrtz_simple_triggers;
            DROP TABLE IF EXISTS qrtz_triggers;
            DROP TABLE IF EXISTS qrtz_job_listeners;
            DROP TABLE IF EXISTS qrtz_job_details;


            CREATE TABLE qrtz_job_details
            (
            JOB_NAME VARCHAR(250) NOT NULL,
            JOB_GROUP VARCHAR(80) NOT NULL,
            DESCRIPTION VARCHAR(120) NULL,
            JOB_CLASS_NAME VARCHAR(128) NOT NULL,
            IS_DURABLE BOOL NOT NULL,
            IS_VOLATILE BOOL NOT NULL,
            IS_STATEFUL BOOL NOT NULL,
            REQUESTS_RECOVERY BOOL NOT NULL,
            JOB_DATA BYTEA NULL,
            PRIMARY KEY (JOB_NAME,JOB_GROUP)
            );

            CREATE TABLE qrtz_job_listeners
            (
            JOB_NAME VARCHAR(250) NOT NULL,
            JOB_GROUP VARCHAR(80) NOT NULL,
            JOB_LISTENER VARCHAR(80) NOT NULL,
            PRIMARY KEY (JOB_NAME,JOB_GROUP,JOB_LISTENER),
            FOREIGN KEY (JOB_NAME,JOB_GROUP)
            REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
            );

            CREATE TABLE qrtz_triggers
            (
            TRIGGER_NAME VARCHAR(250) NOT NULL,
            TRIGGER_GROUP VARCHAR(80) NOT NULL,
            JOB_NAME VARCHAR(250) NOT NULL,
            JOB_GROUP VARCHAR(80) NOT NULL,
            IS_VOLATILE BOOL NOT NULL,
            DESCRIPTION VARCHAR(120) NULL,
            NEXT_FIRE_TIME BIGINT NULL,
            PREV_FIRE_TIME BIGINT NULL,
            PRIORITY INTEGER NULL,
            TRIGGER_STATE VARCHAR(16) NOT NULL,
            TRIGGER_TYPE VARCHAR(8) NOT NULL,
            START_TIME BIGINT NOT NULL,
            END_TIME BIGINT NULL,
            CALENDAR_NAME VARCHAR(80) NULL,
            MISFIRE_INSTR SMALLINT NULL,
            JOB_DATA BYTEA NULL,
            PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (JOB_NAME,JOB_GROUP)
            REFERENCES QRTZ_JOB_DETAILS(JOB_NAME,JOB_GROUP)
            );

            CREATE TABLE qrtz_simple_triggers
            (
            TRIGGER_NAME VARCHAR(250) NOT NULL,
            TRIGGER_GROUP VARCHAR(80) NOT NULL,
            REPEAT_COUNT BIGINT NOT NULL,
            REPEAT_INTERVAL BIGINT NOT NULL,
            TIMES_TRIGGERED BIGINT NOT NULL,
            PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_cron_triggers
            (
            TRIGGER_NAME VARCHAR(250) NOT NULL,
            TRIGGER_GROUP VARCHAR(80) NOT NULL,
            CRON_EXPRESSION VARCHAR(80) NOT NULL,
            TIME_ZONE_ID VARCHAR(80),
            PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_blob_triggers
            (
            TRIGGER_NAME VARCHAR(250) NOT NULL,
            TRIGGER_GROUP VARCHAR(80) NOT NULL,
            BLOB_DATA BYTEA NULL,
            PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP),
            FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_trigger_listeners
            (
            TRIGGER_NAME VARCHAR(250) NOT NULL,
            TRIGGER_GROUP VARCHAR(80) NOT NULL,
            TRIGGER_LISTENER VARCHAR(80) NOT NULL,
            PRIMARY KEY (TRIGGER_NAME,TRIGGER_GROUP,TRIGGER_LISTENER),
            FOREIGN KEY (TRIGGER_NAME,TRIGGER_GROUP)
            REFERENCES QRTZ_TRIGGERS(TRIGGER_NAME,TRIGGER_GROUP)
            );


            CREATE TABLE qrtz_calendars
            (
            CALENDAR_NAME VARCHAR(80) NOT NULL,
            CALENDAR BYTEA NOT NULL,
            PRIMARY KEY (CALENDAR_NAME)
            );


            CREATE TABLE qrtz_paused_trigger_grps
            (
            TRIGGER_GROUP VARCHAR(80) NOT NULL,
            PRIMARY KEY (TRIGGER_GROUP)
            );

            CREATE TABLE qrtz_fired_triggers
            (
            ENTRY_ID VARCHAR(95) NOT NULL,
            TRIGGER_NAME VARCHAR(250) NOT NULL,
            TRIGGER_GROUP VARCHAR(80) NOT NULL,
            IS_VOLATILE BOOL NOT NULL,
            INSTANCE_NAME VARCHAR(80) NOT NULL,
            FIRED_TIME BIGINT NOT NULL,
            PRIORITY INTEGER NOT NULL,
            STATE VARCHAR(16) NOT NULL,
            JOB_NAME VARCHAR(250) NULL,
            JOB_GROUP VARCHAR(80) NULL,
            IS_STATEFUL BOOL NULL,
            REQUESTS_RECOVERY BOOL NULL,
            PRIMARY KEY (ENTRY_ID)
            );

            CREATE TABLE qrtz_scheduler_state
            (
            INSTANCE_NAME VARCHAR(80) NOT NULL,
            LAST_CHECKIN_TIME BIGINT NOT NULL,
            CHECKIN_INTERVAL BIGINT NOT NULL,
            PRIMARY KEY (INSTANCE_NAME)
            );

            CREATE TABLE qrtz_locks
            (
            LOCK_NAME VARCHAR(40) NOT NULL,
            PRIMARY KEY (LOCK_NAME)
            );


            INSERT INTO qrtz_locks values('TRIGGER_ACCESS');
            INSERT INTO qrtz_locks values('JOB_ACCESS');
            INSERT INTO qrtz_locks values('CALENDAR_ACCESS');
            INSERT INTO qrtz_locks values('STATE_ACCESS');
            INSERT INTO qrtz_locks values('MISFIRE_ACCESS');
        </sql>
    </changeSet>

</databaseChangeLog>